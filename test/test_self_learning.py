import pytest
from oscopilot import FridayAgent, FridayExecutor, FridayPlanner, FridayRetriever, SelfLearner, SelfLearning, ToolManager, TextExtractor
from oscopilot.utils import setup_config

class TestSelfLearning:
    """
    A test class for verifying the functionality of the SelfLearning class.

    This class tests various components of the SelfLearning system, including text extraction, course design, and
    the learning process itself. These tests ensure that the system can handle a complete workflow from reading and
    interpreting file content, designing a relevant learning course, and effectively engaging with the designed course.
    """    
    def setup_method(self, method):
        """
        Setup method executed before each test method in this class.

        This method initializes the SelfLearning system with necessary configurations and component instances,
        setting up a complete environment that includes agents, planners, executors, and tool managers tailored for
        self-learning.

        Args:
            method: The test method that will be run after this setup method. This parameter isn't directly used
                    but indicates the testing framework's capability to pass the test method as an argument if needed.
        """        
        self.args = setup_config()
        self.software_name = self.args.software_name
        self.package_name = self.args.package_name
        self.demo_file_path = self.args.demo_file_path
        self.friday_agent = FridayAgent(FridayPlanner, FridayRetriever, FridayExecutor, ToolManager, config=self.args)
        self.self_learning = SelfLearning(self.friday_agent, SelfLearner, ToolManager, self.args, TextExtractor)

    def test_text_extract(self):
        """
        Test to verify that text extraction from a specified file is successful and non-empty.

        This test ensures that the text extractor component of the self-learning system is functional and can
        extract text content from a file, which is critical for the subsequent course design phase.

        """        
        text_extractor = self.self_learning.text_extractor
        file_content = text_extractor.extract_file_content(self.demo_file_path)
        assert file_content != ""
        
    def test_course_design(self):
        """
        Test to ensure that the course design process produces a non-empty course structure.

        This test checks if the course designer can generate a structured learning course based on the provided
        software name, package name, demo file path, and an empty content string. A non-empty result indicates
        successful course design.

        """        
        file_content = """
                        Invoice No.       Date Sales Rep  Product  Price  Units  Sales
                            10500 2011-05-25       Joe Majestic     30     25    750
                            10501 2011-05-25       Moe Majestic     30      9    270
                            10501 2011-05-25       Moe     Quad     32     21    672
                            10501 2011-05-25       Moe   Alpine     22      7    154
                            10501 2011-05-25       Moe  Carlota     25     11    275
                            10502 2011-05-27       Moe Majestic     30      5    150
                            10502 2011-05-27       Moe  Carlota     25     25    625
                            10503 2011-05-28      Chin  Carlota     25     21    525
                            10503 2011-05-28      Chin   Alpine     22     16    352
                            10503 2011-05-28      Chin     Quad     32      4    128
                            10503 2011-05-28      Chin Majestic     30     18    540
                            10504 2011-05-28       Moe   Bellen     23     17    391
                            10504 2011-05-28       Moe     Quad     32      8    256
                            10505 2011-05-28       Joe   Bellen     23     21    483
                            10505 2011-05-28       Joe  Carlota     25      8    200
                            10505 2011-05-28       Joe     Quad     32     17    544
                            10505 2011-05-28       Joe Majestic     30     12    360
                            10505 2011-05-28       Joe   Alpine     22     18    396
                        """
        course = self.self_learning.learner.design_course(self.software_name, self.package_name, self.demo_file_path, file_content)
        assert course != {}

    def test_learn_course(self):
        """
        Test the learning process to ensure the self-learning system can engage with a course.

        This method simulates the learning process using an course template. In a real test scenario,
        this should be replaced with a course generated by the `course_design` method to fully test the system's
        functionality.

        """        
        # This is a demo course template, for testing you need to use the real course generated by the course_design method.
        course = {
                    "read_contents_of_Sheet1": "Task: Use openpyxl to read all the contents of sheet 'Sheet1' in Invoices.xlsx. Input: The path of file and the sheet name. Output: All the content of sheet 'Sheet1' in Invoices.xlsx. File Path: /home/heroding/桌面/FRIDAY_self_learning/jarvis/working_dir/Invoices.xlsx",
                    "read_contents_of_Sheet2": "Task: Use openpyxl to read all the contents of sheet 'Sheet2' in Invoices.xlsx. Input: The path of file and the sheet name. Output: All the content of sheet 'Sheet2' in Invoices.xlsx. File Path: /home/heroding/桌面/FRIDAY_self_learning/jarvis/working_dir/Invoices.xlsx",
                    "insert_new_sheet": "Task: Use openpyxl to insert a new sheet named 'Summary' into Invoices.xlsx. Input: The path of file and the name of the new sheet. Output: None. File Path: /home/heroding/桌面/FRIDAY_self_learning/jarvis/working_dir/Invoices.xlsx",
                    "calculate_total_sales": "Task: Use openpyxl to calculate the total sales from the 'Sales' column in sheet 'Sheet1'. Input: The path of the file, sheet name, and column name. Output: The total sales amount. File Path: /home/heroding/桌面/FRIDAY_self_learning/jarvis/working_dir/Invoices.xlsx",
                    "update_price_with_discount": "Task: Use openpyxl to apply a 10% discount to all 'Price' values in sheet 'Sheet1' and update the sheet accordingly. Input: The path of the file, sheet name, and discount percentage. Output: None, but the 'Price' column in 'Sheet1' should be updated with discounted prices. File Path: /home/heroding/桌面/FRIDAY_self_learning/jarvis/working_dir/Invoices.xlsx",
                    "calculate_acceleration_formula": "Task: Use openpyxl to calculate the acceleration for each 'Hanging Mass (m2) (kg)' in sheet 'Sheet2' using the formula provided in the sheet and update the 'Acceleration (m/s^2)' column. Input: The path of the file and sheet name. Output: None, but the 'Acceleration (m/s^2)' column in 'Sheet2' should be updated with calculated values. File Path: /home/heroding/桌面/FRIDAY_self_learning/jarvis/working_dir/Invoices.xlsx",
                    "generate_sales_report": "Task: Use openpyxl to create a new sheet named 'Sales Report' that summarizes the total sales per 'Sales Rep' from sheet 'Sheet1'. Input: The path of the file and the name of the new sheet. Output: None, but a new sheet 'Sales Report' should be created with each 'Sales Rep' and their corresponding total sales. File Path: /home/heroding/桌面/FRIDAY_self_learning/jarvis/working_dir/Invoices.xlsx",
                    "plot_sales_histogram": "Task: Use openpyxl to plot a histogram for the sales data in sheet 'Sheet1' of Invoices.xlsx. Input: The path of the file and sheet name. Output: None, but a histogram plot should be generated and saved within the workbook. File Path: /home/heroding/桌面/FRIDAY_self_learning/jarvis/working_dir/Invoices.xlsx"
                }   
        self.self_learning.learn_course(course)
        


if __name__ == "__main__":
    pytest.main()
